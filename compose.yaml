services:
#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
#    environment:
#      - discovery.type=single-node
#      - ES_JAVA_OPTS=-Xms512m -Xmx512m
#      - ELASTIC_PASSWORD=${ES_PASSWORD}
#      - bootstrap.memory_lock=true
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    volumes:
#      - ./data/elastic_search_data:/usr/share/elasticsearch/data
#    ports:
#      - 9200:9200
#    networks:
#      - common
#    healthcheck:
#      test: [ "CMD-SHELL", "curl -s ${ES_CLUSTER_URL}/_cluster/health | grep -vq '\"status\":\"red\"'" ]
#      interval: 1s
#      timeout: 1s
#      retries: 50

  postgres:
    restart: always
    image: postgres:latest
    # TODO
#    volumes:
#      - ./data/postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_NAME}
    networks:
      - common

  redis:
    restart: always
    image: redis:latest
    # TODO
#    volumes:
#      - ./data/redis_data:/data
    ports:
      - "6379:6379"
    command:
      - --maxmemory 256MB
      - --requirepass your_redis_password
    networks:
      - common

  prometheus:
    restart: always
    image: prom/prometheus:latest
    # TODO
#    volumes:
#      - ./prometheus.yml:/etc/prometheus/prometheus.yml
#      - ./data/prometheus_data:/etc/prometheus
    ports:
      - "9090:9090"
    networks:
      - common

  grafana:
    restart: always
    image: grafana/grafana:latest
    # TODO
#    volumes:
#      - ./data/grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - common

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ADMIN}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    command: server /data --console-address ":9001"

  server:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    networks:
      - common
    ports:
      - "${APP_PORT}:${APP_PORT}"
    environment:
      - PORT=${APP_PORT}
      - HOST=${APP_HOST}
      - IS_PRODUCTION=${APP_IS_PRODUCTION}
      - FST_ACCESS_KEY=${APP_FST_ACCESS_KEY}
      - FST_REFRESH_KEY=${APP_FST_REFRESH_KEY}
      - MINIO_ENDPOINT=${APP_MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${APP_MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${APP_MINIO_SECRET_KEY}
      - ES_ADDRESSES=${ES_ADDRESSES}
      - ES_USERNAME=${ES_USERNAME}
      - ES_PASSWORD=${ES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USERNAME=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SSL_MODE=${POSTGRES_SSL_MODE}
      - POSTGRES_DB_NAME=${POSTGRES_DB_NAME}
      - REDIS_ADDRESS=${REDIS_HOST}:${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
#      elasticsearch:
#        condition: service_started
      postgres:
        condition: service_started
      redis:
        condition: service_started
      prometheus:
        condition: service_started
networks:
  common:
    driver: bridge